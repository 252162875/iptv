name: sync_live_list

# 使用cron表达式配置每天0点运行该工作流，并添加手动触发选项
on:
  schedule:
    - cron: '5 * * * *'
  workflow_dispatch:

# 定义工作流的环境变量
env:
  MY_GITHUB_TOKEN: ${{ secrets.MY_GITHUB_TOKEN }}    

jobs:
  run-script:
    # 运行在最新的Ubuntu环境上
    runs-on: ubuntu-latest

    steps:
    # 第一步：检出（checkout）代码仓库
    - name: Checkout repository
      uses: actions/checkout@v2

    # 第二步：设置Python环境
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'  # 使用Python 3.x版本

    # 第三步：安装Python依赖项
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install requests

    # 第四步：切换到脚本目录并运行down_m3u_pixman.py脚本
    - name: sync_live_list
      run: |
        cd tools
        python syn_live_list.sh

    # 第五步：配置Git用户信息
    - name: Configure Git
      run: |
        git config --global user.name 'github-actions[bot]'
        git config --global user.email 'github-actions[bot]@users.noreply.github.com'

    # 第六步：切换到脚本目录并添加所有更改
    - name: Add changes
      run: |
        cd tools
        git add .

    # 第七步：提交更改
    - name: Commit changes
      run: |
        cd down_m3u_pixman
        if ! git diff-index --quiet HEAD; then
          TZ='Asia/Shanghai' date_str=$(date +'%Y-%m-%d %H:%M:%S')
          git commit -m "Auto-update M3U and TXT files - $date_str"
        else
          echo "No changes to commit."
        fi

    # 第八步：推送更改到仓库
    - name: Push changes
      run: |
        cd tv
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用GitHub提供的token进行身份验证

    # 第九步：确保工作流完成
    - name: Complete workflow
      run: echo "Workflow completed successfully"
